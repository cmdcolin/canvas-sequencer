{"version":3,"sources":["src/CanvasAtom.js","src/CanvasSequence.js","src/CanvasBlueprint.js","index.js"],"names":["TYPES","METHOD","PROPERTY","Atom","inst","args","MethodCanvasAtom","type","context","PropertyCanvasAtom","atomOf","CanvasAtom","Object","entries","forEach","p","v","defineProperty","value","configurable","enumerable","writable","module","exports","require","locals","freeze","METHODS","PROPERTIES","symbols","sequence","Symbol","for","push","fromJSON","CanvasSequence","data","save","a","execute","restore","m","prototype","get","set","replaceTags","str","values","tag","replace","hasOwnProperty","CanvasBlueprint","seq","realArgs","map","TypeError"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["/*\n * Author: Michael van der Kamp\n * Date: July/August, 2018\n * \n * This file defines the low level 'CanvasAtom' for use by a CanvasSequence.\n *\n * A CanvasAtom is a unit of execution in a CanvasSequence. It comes in two\n * flavours: one for describing a method call, one for describing a property\n * assignment.\n */\n\n'use strict';\n\n/**\n * The types of CanvasAtoms that are available.\n *\n * @enum {string}\n * @readonly\n * @lends CanvasAtom\n */\nconst TYPES = {\n  /** @const */ METHOD:   'method',\n  /** @const */ PROPERTY: 'property',\n};\n\n/**\n * Internal common constructor definition for Canvas Atoms.\n */\nclass Atom {\n  /**\n   * @param {string} inst - The canvas context instruction.\n   * @param {mixed[]} args - The arguments to the instruction.\n   */\n  constructor(inst, args) {\n    /**\n     * The canvas context instruction.\n     *\n     * @private\n     * @type {string}\n     */\n    this.inst = inst;\n\n    /**\n     * The arguments to the instruction.\n     *\n     * @private\n     * @type {mixed[]}\n     */\n    this.args = args;\n  }\n}\n\n/**\n * A MethodCanvasAtom is used for canvas context methods. The arguments will be\n * treated as an actual array, all of which will be passed to the method when\n * the atom is executed.\n *\n * @extends Atom\n */\nclass MethodCanvasAtom extends Atom {\n  constructor(inst, args) {\n    super(inst, args);\n\n    /**\n     * The type of atom.\n     *\n     * @private\n     * @type {string}\n     */\n    this.type = TYPES.METHOD;\n  }\n\n  /**\n   * Execute the atom on the given context.\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  execute(context) {\n    context[this.inst](...this.args);\n  }\n}\n\n/**\n * A PropertyCanvasAtom is used for canvas context properties (a.k.a. fields).\n * Only the first argument will be used, and will be the value assigned to the\n * field.\n *\n * @extends Atom\n */\nclass PropertyCanvasAtom extends Atom {\n  constructor(inst, args) {\n    super(inst, args);\n    this.type = TYPES.PROPERTY;\n  }\n\n  /**\n   * Execute the atom on the given context.\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  execute(context) {\n    context[this.inst] = this.args[0];\n  }\n}\n\n/*\n * This object is for demultiplexing types in the CanvasAtom constructor.\n * Defined outside the constructor so it doesn't need to be redefined every\n * time a new atom is constructed. Defined outside the class so that it is not\n * externally exposed.\n */\nconst atomOf = {\n  [TYPES.METHOD]:   MethodCanvasAtom,\n  [TYPES.PROPERTY]: PropertyCanvasAtom,\n};\n\n/**\n * The exposed CanvasAtom class. Results in the instantiation of either a\n * MethodCanvasAtom or a PropertyCanvasAtom, depending on the given type.\n */\nclass CanvasAtom {\n  /**\n   * @param {string} type - Either CanvasAtom.METHOD or CanvasAtom.PROPERTY.\n   * @param {string} inst - The canvas context instruction.\n   * @param {mixed[]} args - The arguments to the instruction.\n   */\n  constructor(type, inst, ...args) {\n    return new atomOf[type](inst, args);\n  }\n}\n\n/*\n * Define the types once locally, but make them available externally as\n * immutable properties on the class.\n */\nObject.entries(TYPES).forEach(([p,v]) => {\n  Object.defineProperty(CanvasAtom, p, {\n    value: v,\n    configurable: false,\n    enumerable: true,\n    writable: false,\n  });\n});\n\nmodule.exports = CanvasAtom;\n\n","/*\n * Author: Michael van der Kamp\n * Date: July/August, 2018\n * \n * This file provides the definition of the CanvasSequence class.\n */\n\n'use strict';\n\nconst CanvasAtom = require('./CanvasAtom.js');\n\nconst locals = Object.freeze({\n  METHODS: [\n    'arc',\n    'arcTo',\n    'beginPath',\n    'bezierCurveTo',\n    'clearRect',\n    'clip',\n    'closePath',\n    'drawFocusIfNeeded',\n    'drawImage',\n    'ellipse',\n    'fill',\n    'fillRect',\n    'fillText',\n    'lineTo',\n    'moveTo',\n    'putImageData',\n    'quadraticCurveTo',\n    'rect',\n    'resetTransform',\n    'restore',\n    'rotate',\n    'save',\n    'scale',\n    'setLineDash',\n    'setTransform',\n    'stroke',\n    'strokeRect',\n    'strokeText',\n    'transform',\n    'translate',\n  ],\n\n  PROPERTIES: [\n    'fillStyle',\n    'filter',\n    'font',\n    'globalAlpha',\n    'globalCompositeOperation',\n    'imageSmoothingEnabled',\n    'lineCap',\n    'lineDashOffset',\n    'lineJoin',\n    'lineWidth',\n    'miterLimit',\n    'shadowBlur',\n    'shadowColor',\n    'shadowOffsetX',\n    'shadowOffsetY',\n    'strokeStyle',\n    'textAlign',\n    'textBaseline',\n  ],\n});\n\n// Mark properties as intended for internal use.\nconst symbols = Object.freeze({\n  sequence: Symbol.for('sequence'),\n  push: Symbol.for('push'),\n  fromJSON: Symbol.for('fromJSON'),\n});\n\n/**\n * A CanvasSequence is a linear collection of CanvasAtoms, capable of being\n * executed on a CanvasRenderingContext2D.\n */\nclass CanvasSequence {\n  /**\n   * @param {CanvasSequence} [data=null] - An unrevived (i.e. freshly\n   * transmitted) CanvasSequence. If present, the constructor revives the\n   * sequence. Note that an already revived CanvasSequence cannot be used as the\n   * argument here.\n   */\n  constructor(data = null) {\n    /**\n     * The CanvasAtoms that form the sequence.\n     *\n     * @private\n     * @type {CanvasAtom[]}\n     */\n    this[symbols.sequence] = [];\n\n    // If data is present, assume it is a CanvasSequence that needs reviving.\n    if (data) this[symbols.fromJSON](data);\n  }\n\n  /**\n   * Revive the sequence from transmitted JSON data.\n   *\n   * @private\n   * @param {CanvasSequence} [data={}]\n   */\n  [symbols.fromJSON](data = {}) {\n    data.sequence.forEach( ({ type, inst, args }) => {\n      this[symbols.push](type, inst, ...args);\n    });\n  }\n\n  /**\n   * Push a new CanvasAtom onto the end of the sequence.\n   *\n   * @private\n   * @param {...mixed} args - The arguments to the CanvasAtom constructor.\n   */\n  [symbols.push](...args) {\n    this[symbols.sequence].push(new CanvasAtom(...args));\n  }\n\n  /**\n   * Execute the sequence on the given context.\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  execute(context) {\n    context.save();\n    this[symbols.sequence].forEach( a => a.execute(context) );\n    context.restore();\n  }\n\n  /**\n   * Export a JSON serialized version of the sequence, ready for transmission.\n   *\n   * @return {CanvasSequence} In JSON serialized form.\n   */\n  toJSON() {\n    return { sequence: this[symbols.sequence] };\n  }\n}\n\nlocals.METHODS.forEach( m => {\n  Object.defineProperty( CanvasSequence.prototype, m, {\n    value: function pushMethodCall(...args) {\n      this[symbols.push](CanvasAtom.METHOD, m, ...args);\n    }, \n    writable: false,\n    enumerable: true,\n    configurable: false,\n  });\n});\n\nlocals.PROPERTIES.forEach( p => {\n  Object.defineProperty( CanvasSequence.prototype, p, {\n    get() { throw `Invalid canvas sequencer interaction, cannot get ${p}.` },\n    set(v) { this[symbols.push](CanvasAtom.PROPERTY, p, v) },\n    enumerable: true,\n    configurable: false,\n  });\n});\n\nmodule.exports = CanvasSequence;\n\n","/*\n * Author: Michael van der Kamp\n * Date: July/August, 2018\n * \n * Thie file provides the definition of the CanvasBlueprint class.\n *\n * A CanvasBlueprint is similar to a plain CanvasSequence, except that it\n * accepts tag strings as arguments, and before it can be executed it  needs to\n * be 'built' with an object defining which values should replace the tags.\n */\n\n'use strict';\n\nconst CanvasSequence = require('./CanvasSequence.js');\n\n// Mark properties as intended for internal use.\nconst symbols = Object.freeze({\n  sequence: Symbol.for('sequence'),\n  push: Symbol.for('push'),\n});\n\n/**\n * Replace tags in the given string with correlated value in values.\n *\n * Rules:\n * - Strings not surrounded by curly braces {} will be returned.\n * - Strings surrounded by curly braces but not corresponding to a property on\n *   'values' will result in a string without the curly braces being returned.\n * - Strings surrounded by curly braces, with the inner string corresponding to\n *   a property on 'values' will result in the corresponding value being\n *   returned.\n *\n * @inner\n * @private\n *\n * @param {string} str\n * @param {object} values\n *\n * @return {string|mixed} Either the original string if no replacement was\n * performed, or the appropriate value.\n */\nfunction replaceTags(str, values) {\n  const tag = str.replace(/^{|}$/g, '');\n  if (tag !== str) {\n    return values.hasOwnProperty(tag) ? values[tag] : tag;\n  }\n  return str;\n}\n\n/**\n * A CanvasBlueprint is a rebuildable CanvasSequence. It accepts tagged\n * arguments. When built, tags will be replaced using properties from a provided\n * object.\n *\n * @extends CanvasSequence\n */\nclass CanvasBlueprint extends CanvasSequence {\n  /** Build the blueprint using the provided values.\n   *\n   * Rules: \n   * - Strings not surrounded by curly braces {} will be returned.\n   * - Strings surrounded by curly braces but not corresponding to a property on\n   *   'values' will result in a string without the curly braces being returned.\n   * - Strings surrounded by curly braces, with the inner string corresponding\n   *   to a property on 'values' will result in the corresponding value being\n   *   returned.\n   *\n   * @param {object} values - The values with which to construct the sequence.\n   *\n   * @return {CanvasSequence} The constructed sequence.\n   */\n  build(values = {}) {\n    const seq = new CanvasSequence();\n    this[symbols.sequence].forEach( ({ type, inst, args }) => {\n      const realArgs = args.map( v => {\n        return (typeof v === 'string') ? replaceTags(v, values) : v;\n      });\n      seq[symbols.push](type, inst, ...realArgs);\n    });\n    return seq;\n  }\n\n  /**\n   * CanvasBlueprints cannot be directly executed!\n   *\n   * @throws TypeError\n   */\n  execute() {\n    throw new TypeError('Cannot execute a blueprint.');\n  }\n}\n\nmodule.exports = CanvasBlueprint;\n\n","/*\n * Access point for npm.\n */\n\nconst CanvasSequence = require('./src/CanvasSequence.js');\nconst CanvasBlueprint = require('./src/CanvasBlueprint.js');\n\nmodule.exports = { CanvasSequence, CanvasBlueprint };\n\n"]}