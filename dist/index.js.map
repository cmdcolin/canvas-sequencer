{"mappings":"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","sources":["index.js","src/CanvasSequence.js","src/CanvasAtom.js","src/PathSequence.js","src/PathAtom.js","src/CanvasBlueprint.js"],"sourcesContent":["/*\n * Access point for npm.\n */\n\n\"use strict\";\n\nconst CanvasSequence = require(\"./src/CanvasSequence.js\");\nconst CanvasBlueprint = require(\"./src/CanvasBlueprint.js\");\nconst PathSequence = require(\"./src/PathSequence.js\");\n\nmodule.exports = { CanvasSequence, CanvasBlueprint, PathSequence };\n","/*\n * Author: Michael van der Kamp\n * Date: July/August, 2018\n *\n * This file provides the definition of the CanvasSequence class.\n */\n\n'use strict'\n\nconst CanvasAtom = require('./CanvasAtom.js')\n\nconst locals = Object.freeze({\n  METHODS: [\n    'addHitRegion',\n    'arc',\n    'arcTo',\n    'beginPath',\n    'bezierCurveTo',\n    'clearHitRegions',\n    'clearRect',\n    'clip',\n    'closePath',\n    'drawFocusIfNeeded',\n    'drawImage',\n    'ellipse',\n    'fill',\n    'fillRect',\n    'fillText',\n    'lineTo',\n    'moveTo',\n    'putImageData',\n    'quadraticCurveTo',\n    'rect',\n    'removeHitRegion',\n    'resetTransform',\n    'restore',\n    'rotate',\n    'save',\n    'scale',\n    'scrollPathIntoView',\n    'setLineDash',\n    'setTransform',\n    'stroke',\n    'strokeRect',\n    'strokeText',\n    'transform',\n    'translate',\n  ],\n\n  PROPERTIES: [\n    'direction',\n    'fillStyle',\n    'filter',\n    'font',\n    'globalAlpha',\n    'globalCompositeOperation',\n    'imageSmoothingEnabled',\n    'imageSmoothingQuality',\n    'lineCap',\n    'lineDashOffset',\n    'lineJoin',\n    'lineWidth',\n    'miterLimit',\n    'shadowBlur',\n    'shadowColor',\n    'shadowOffsetX',\n    'shadowOffsetY',\n    'strokeStyle',\n    'textAlign',\n    'textBaseline',\n  ],\n})\n\n// Mark properties as intended for internal use.\nconst symbols = Object.freeze({\n  sequence: Symbol.for('sequence'),\n  push: Symbol.for('push'),\n  fromJSON: Symbol.for('fromJSON'),\n})\n\n/**\n * A CanvasSequence is a linear collection of CanvasAtoms, capable of being\n * executed on a CanvasRenderingContext2D.\n *\n * @param {CanvasSequence} [data=null] - An unrevived (i.e. freshly transmitted)\n * CanvasSequence. If present, the constructor revives the sequence. Note that\n * an already revived CanvasSequence cannot be used as the argument here.\n */\nclass CanvasSequence {\n  constructor(data = null) {\n    /**\n     * The CanvasAtoms that form the sequence.\n     *\n     * @private\n     * @type {CanvasAtom[]}\n     */\n    this[symbols.sequence] = []\n\n    // If data is present, assume it is a CanvasSequence that needs reviving.\n    if (data) this[symbols.fromJSON](data)\n  }\n\n  /**\n   * Revive the sequence from transmitted JSON data.\n   *\n   * @private\n   * @param {CanvasSequence} [data={}]\n   */\n  [symbols.fromJSON](data = { sequence: [] }) {\n    data.sequence.forEach(({ type, inst, args }) => {\n      this[symbols.push](type, inst, args)\n    })\n  }\n\n  /**\n   * Push a new CanvasAtom onto the end of the sequence.\n   *\n   * @private\n   * @param {string} type - The type of CanvasAtom to push.\n   * @param {string} inst - The canvas context instruction.\n   * @param {*[]} args - The arguments to the canvas context instruction.\n   */\n  [symbols.push](type, inst, args) {\n    this[symbols.sequence].push(new CanvasAtom(type, inst, args))\n  }\n\n  /**\n   * Execute the sequence on the given context.\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  execute(context) {\n    context.save()\n    this[symbols.sequence].forEach(a => a.execute(context))\n    context.restore()\n  }\n\n  /**\n   * Export a JSON serialized version of the sequence, ready for transmission.\n   *\n   * @return {CanvasSequence} In JSON serialized form.\n   */\n  toJSON() {\n    return { sequence: this[symbols.sequence] }\n  }\n}\n\nlocals.METHODS.forEach(m => {\n  Object.defineProperty(CanvasSequence.prototype, m, {\n    value: function pushMethodCall(...args) {\n      this[symbols.push](CanvasAtom.METHOD, m, args)\n    },\n    writable: false,\n    enumerable: true,\n    configurable: false,\n  })\n})\n\nlocals.PROPERTIES.forEach(p => {\n  Object.defineProperty(CanvasSequence.prototype, p, {\n    get() {\n      throw `Invalid canvas sequencer interaction, cannot get ${p}.`\n    },\n    set(v) {\n      this[symbols.push](CanvasAtom.PROPERTY, p, [v])\n    },\n    enumerable: true,\n    configurable: false,\n  })\n})\n\nmodule.exports = CanvasSequence\n","/*\n * Author: Michael van der Kamp\n * Date: July/August, 2018\n *\n * This file defines the low level 'CanvasAtom' for use by a CanvasSequence.\n *\n * A CanvasAtom is a unit of execution in a CanvasSequence. It comes in two\n * flavours: one for describing a method call, one for describing a property\n * assignment.\n */\n;('use strict')\nconst PathSequence = require('./PathSequence')\n\n/**\n * The types of CanvasAtoms that are available.\n *\n * @enum {string}\n * @readonly\n * @lends CanvasAtom\n */\nconst TYPES = {\n  /** @const */ METHOD: 'method',\n  /** @const */ PROPERTY: 'property',\n}\n\n/**\n * Internal common constructor definition for Canvas Atoms.\n *\n * @param {string} inst - The canvas context instruction.\n * @param {*[]} args - The arguments to the instruction.\n */\nclass Atom {\n  constructor(inst, args) {\n    /**\n     * The canvas context instruction.\n     *\n     * @private\n     * @type {string}\n     */\n    this.inst = inst\n\n    /**\n     * The arguments to the instruction.\n     *\n     * @private\n     * @type {*[]}\n     */\n    this.args = JSON.parse(JSON.stringify(args))\n  }\n}\n\n/**\n * A MethodCanvasAtom is used for canvas context methods. The arguments will be\n * treated as an actual array, all of which will be passed to the method when\n * the atom is executed.\n *\n * @extends Atom\n */\nclass MethodCanvasAtom extends Atom {\n  constructor(inst, args) {\n    super(inst, args)\n\n    /**\n     * The type of atom.\n     *\n     * @private\n     * @type {string}\n     */\n    this.type = TYPES.METHOD\n  }\n\n  /**\n   * Execute the atom on the given context.\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  execute(context) {\n    if (this.args[0].isPath) {\n      const path = new Path2D()\n      const hydrateSeq = new PathSequence()\n      const sequence = this.args[0].sequence\n      hydrateSeq.fromJSON({ sequence })\n      hydrateSeq.execute(path)\n      context[this.inst](path)\n    } else {\n      context[this.inst](...this.args)\n    }\n  }\n}\n\n/**\n * A PropertyCanvasAtom is used for canvas context properties (a.k.a. fields).\n * Only the first argument will be used, and will be the value assigned to the\n * field.\n *\n * @extends Atom\n */\nclass PropertyCanvasAtom extends Atom {\n  constructor(inst, args) {\n    super(inst, args)\n    this.type = TYPES.PROPERTY\n  }\n\n  /**\n   * Execute the atom on the given context.\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  execute(context) {\n    context[this.inst] = this.args[0]\n  }\n}\n\n/*\n * This object is for demultiplexing types in the CanvasAtom constructor.\n * Defined outside the constructor so it doesn't need to be redefined every\n * time a new atom is constructed. Defined outside the class so that it is not\n * externally exposed.\n */\nconst atomOf = {\n  [TYPES.METHOD]: MethodCanvasAtom,\n  [TYPES.PROPERTY]: PropertyCanvasAtom,\n}\n\n/**\n * The exposed CanvasAtom class. Results in the instantiation of either a\n * MethodCanvasAtom or a PropertyCanvasAtom, depending on the given type.\n *\n * @param {string} type - Either CanvasAtom.METHOD or CanvasAtom.PROPERTY.\n * @param {string} inst - The canvas context instruction.\n * @param {*[]} args - The arguments to the instruction.\n */\nclass CanvasAtom {\n  constructor(type, inst, args) {\n    return new atomOf[type](inst, args)\n  }\n}\n\n/*\n * Define the types once locally, but make them available externally as\n * immutable properties on the class.\n */\nObject.entries(TYPES).forEach(([p, v]) => {\n  Object.defineProperty(CanvasAtom, p, {\n    value: v,\n    configurable: false,\n    enumerable: true,\n    writable: false,\n  })\n})\n\nmodule.exports = CanvasAtom\n","/*\n * Author: Michael van der Kamp\n * Date: July/August, 2018\n *\n * This file provides the definition of the PathSequence class.\n */\n\n'use strict'\n\nconst PathAtom = require('./PathAtom.js')\n\nconst locals = Object.freeze({\n  METHODS: ['rect'],\n\n  PROPERTIES: [\n    // \"direction\",\n    // \"fillStyle\",\n    // \"filter\",\n    // \"font\",\n    // \"globalAlpha\",\n    // \"globalCompositeOperation\",\n    // \"imageSmoothingEnabled\",\n    // \"imageSmoothingQuality\",\n    // \"lineCap\",\n    // \"lineDashOffset\",\n    // \"lineJoin\",\n    // \"lineWidth\",\n    // \"miterLimit\",\n    // \"shadowBlur\",\n    // \"shadowColor\",\n    // \"shadowOffsetX\",\n    // \"shadowOffsetY\",\n    // \"strokeStyle\",\n    // \"textAlign\",\n    // \"textBaseline\",\n  ],\n})\n\n// Mark properties as intended for internal use.\nconst symbols = Object.freeze({\n  sequence: Symbol.for('sequence'),\n  push: Symbol.for('push'),\n})\n\n/**\n * A PathSequence is a linear collection of PathAtoms, capable of being\n * executed on a PathRenderingContext2D.\n *\n * @param {PathSequence} [data=null] - An unrevived (i.e. freshly transmitted)\n * PathSequence. If present, the constructor revives the sequence. Note that\n * an already revived PathSequence cannot be used as the argument here.\n */\nclass PathSequence {\n  constructor(data = null) {\n    /**\n     * The PathAtoms that form the sequence.\n     *\n     * @private\n     * @type {PathAtom[]}\n     */\n    this[symbols.sequence] = []\n\n    // If data is present, assume it is a PathSequence that needs reviving.\n    if (data) this.fromJSON(data)\n  }\n\n  /**\n   * Revive the sequence from transmitted JSON data.\n   *\n   * @private\n   * @param {PathSequence} [data={}]\n   */\n  fromJSON(data = { sequence: [] }) {\n    data.sequence.forEach(({ type, inst, args }) => {\n      this[symbols.push](type, inst, args)\n    })\n  }\n\n  /**\n   * Push a new PathAtom onto the end of the sequence.\n   *\n   * @private\n   * @param {string} type - The type of PathAtom to push.\n   * @param {string} inst - The canvas context instruction.\n   * @param {*[]} args - The arguments to the canvas context instruction.\n   */\n  [symbols.push](type, inst, args) {\n    this[symbols.sequence].push(new PathAtom(type, inst, args))\n  }\n\n  /**\n   * Execute the sequence on the given context.\n   *\n   * @param {PathRenderingContext2D} context\n   */\n  execute(context) {\n    this[symbols.sequence].forEach(a => a.execute(context))\n  }\n\n  /**\n   * Export a JSON serialized version of the sequence, ready for transmission.\n   *\n   * @return {PathSequence} In JSON serialized form.\n   */\n  toJSON() {\n    return {\n      isPath: true,\n      sequence: JSON.parse(JSON.stringify(this[symbols.sequence])),\n    }\n  }\n}\n\nlocals.METHODS.forEach(m => {\n  Object.defineProperty(PathSequence.prototype, m, {\n    value: function pushMethodCall(...args) {\n      this[symbols.push](PathAtom.METHOD, m, args)\n    },\n    writable: false,\n    enumerable: true,\n    configurable: false,\n  })\n})\n\nlocals.PROPERTIES.forEach(p => {\n  Object.defineProperty(PathSequence.prototype, p, {\n    get() {\n      throw `Invalid canvas sequencer interaction, cannot get ${p}.`\n    },\n    set(v) {\n      this[symbols.push](PathAtom.PROPERTY, p, [v])\n    },\n    enumerable: true,\n    configurable: false,\n  })\n})\n\nmodule.exports = PathSequence\n","/*\n * Author: Michael van der Kamp\n * Date: July/August, 2018\n *\n * This file defines the low level 'PathAtom' for use by a PathSequence.\n *\n * A PathAtom is a unit of execution in a PathSequence. It comes in two\n * flavours: one for describing a method call, one for describing a property\n * assignment.\n */\n\n'use strict'\n\n/**\n * The types of PathAtoms that are available.\n *\n * @enum {string}\n * @readonly\n * @lends PathAtom\n */\nconst TYPES = {\n  /** @const */ METHOD: 'method',\n  /** @const */ PROPERTY: 'property',\n}\n\n/**\n * Internal common constructor definition for Canvas Atoms.\n *\n * @param {string} inst - The canvas context instruction.\n * @param {*[]} args - The arguments to the instruction.\n */\nclass Atom {\n  constructor(inst, args) {\n    /**\n     * The canvas context instruction.\n     *\n     * @private\n     * @type {string}\n     */\n    this.inst = inst\n\n    /**\n     * The arguments to the instruction.\n     *\n     * @private\n     * @type {*[]}\n     */\n    this.args = args\n  }\n}\n\n/**\n * A MethodPathAtom is used for canvas context methods. The arguments will be\n * treated as an actual array, all of which will be passed to the method when\n * the atom is executed.\n *\n * @extends Atom\n */\nclass MethodPathAtom extends Atom {\n  constructor(inst, args) {\n    super(inst, args)\n\n    /**\n     * The type of atom.\n     *\n     * @private\n     * @type {string}\n     */\n    this.type = TYPES.METHOD\n  }\n\n  /**\n   * Execute the atom on the given context.\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  execute(context) {\n    context[this.inst](...this.args)\n  }\n}\n\n/**\n * A PropertyPathAtom is used for canvas context properties (a.k.a. fields).\n * Only the first argument will be used, and will be the value assigned to the\n * field.\n *\n * @extends Atom\n */\nclass PropertyPathAtom extends Atom {\n  constructor(inst, args) {\n    super(inst, args)\n    this.type = TYPES.PROPERTY\n  }\n\n  /**\n   * Execute the atom on the given context.\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  execute(context) {\n    context[this.inst] = this.args[0]\n  }\n}\n\n/*\n * This object is for demultiplexing types in the PathAtom constructor.\n * Defined outside the constructor so it doesn't need to be redefined every\n * time a new atom is constructed. Defined outside the class so that it is not\n * externally exposed.\n */\nconst atomOf = {\n  [TYPES.METHOD]: MethodPathAtom,\n  [TYPES.PROPERTY]: PropertyPathAtom,\n}\n\n/**\n * The exposed PathAtom class. Results in the instantiation of either a\n * MethodPathAtom or a PropertyPathAtom, depending on the given type.\n *\n * @param {string} type - Either PathAtom.METHOD or PathAtom.PROPERTY.\n * @param {string} inst - The canvas context instruction.\n * @param {*[]} args - The arguments to the instruction.\n */\nclass PathAtom {\n  constructor(type, inst, args) {\n    return new atomOf[type](inst, args)\n  }\n}\n\n/*\n * Define the types once locally, but make them available externally as\n * immutable properties on the class.\n */\nObject.entries(TYPES).forEach(([p, v]) => {\n  Object.defineProperty(PathAtom, p, {\n    value: v,\n    configurable: false,\n    enumerable: true,\n    writable: false,\n  })\n})\n\nmodule.exports = PathAtom\n","/*\n * Author: Michael van der Kamp\n * Date: July/August, 2018\n *\n * Thie file provides the definition of the CanvasBlueprint class.\n *\n * A CanvasBlueprint is similar to a plain CanvasSequence, except that it\n * accepts tag strings as arguments, and before it can be executed it  needs to\n * be 'built' with an object defining which values should replace the tags.\n */\n\n'use strict'\n\nconst CanvasSequence = require('./CanvasSequence.js')\n\n// Mark properties as intended for internal use.\nconst symbols = Object.freeze({\n  sequence: Symbol.for('sequence'),\n  push: Symbol.for('push'),\n})\n\n/**\n * Replace tags in the given string with correlated value in values.\n *\n * Rules:\n * - Strings not surrounded by curly braces {} will be returned.\n * - Strings surrounded by curly braces but not corresponding to a property on\n *   'values' will result in a string without the curly braces being returned.\n * - Strings surrounded by curly braces, with the inner string corresponding to\n *   a property on 'values' will result in the corresponding value being\n *   returned.\n *\n * @inner\n * @private\n *\n * @param {string} str\n * @param {object} values\n *\n * @return {string|mixed} Either the original string if no replacement was\n * performed, or the appropriate value.\n */\nfunction replaceTags(str, values) {\n  const tag = str.replace(/^\\{|\\}$/gu, '')\n  if (tag !== str) {\n    return values.hasOwnProperty(tag) ? values[tag] : tag\n  }\n  return str\n}\n\n/**\n * A CanvasBlueprint is a rebuildable CanvasSequence. It accepts tagged\n * arguments. When built, tags will be replaced using properties from a provided\n * object.\n *\n * @extends CanvasSequence\n */\nclass CanvasBlueprint extends CanvasSequence {\n  /**\n   * Build the blueprint using the provided values.\n   *\n   * Rules:\n   * - Strings not surrounded by curly braces {} will be returned.\n   * - Strings surrounded by curly braces but not corresponding to a property on\n   *   'values' will result in a string without the curly braces being returned.\n   * - Strings surrounded by curly braces, with the inner string corresponding\n   *   to a property on 'values' will result in the corresponding value being\n   *   returned.\n   *\n   * @param {object} values - The values with which to construct the sequence.\n   *\n   * @return {CanvasSequence} The constructed sequence.\n   */\n  build(values = {}) {\n    const seq = new CanvasSequence()\n    this[symbols.sequence].forEach(({ type, inst, args }) => {\n      const realArgs = args.map(v => {\n        return typeof v === 'string' ? replaceTags(v, values) : v\n      })\n      seq[symbols.push](type, inst, realArgs)\n    })\n    return seq\n  }\n\n  /**\n   * CanvasBlueprints cannot be directly executed!\n   *\n   * @throws TypeError\n   */\n  execute() {\n    throw new TypeError('Cannot execute a blueprint.')\n  }\n}\n\nmodule.exports = CanvasBlueprint\n"],"names":[],"version":3,"file":"index.js.map"}